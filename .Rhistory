)
class(df)
pts
temp.coords[1:3,]
class(df)
pts <- SpatialPoints(temp.coords)
pts
pts[buffered.strata,]
# Add positive buffer region
buffered.strata <- rgeos::gBuffer(strata.sp, width = x.space)
#Extract polygons and gaps for current strata
strata.sp <- as(region@region[[sf.column]][i], "Spatial")
# Add positive buffer region
buffered.strata <- rgeos::gBuffer(strata.sp, width = x.space)
pts[buffered.strata,]
inside <- pts[buffered.strata,]
nrow(temp.coords)
nrow(inside)
class(inside)
nrow(inside@coords)
plot(inside)
plot(buffered.strata, add= T)
plot(buffered.strata)
plot(inside, add = T)
plot(buffered.strata, col = 4)
plot(inside, add = T)
class(inside@coords)
gridpoints <- inside@coords
gridpoints[1:10,]
plot(buffered.strata, col = "lightblue")
points(gridpoints)
points(gridpoints, pch = 20)
plot(buffered.strata, col = "lightblue")
points(gridpoints, pch = 20)
gridpoints <- as.data.frame(inside@coords)
library(dsims)
?make.density
density <- make.density()
plot(density)
plot(make.region(), add = TRUE)
density@density.surface[[1]]
density@density.surface[[1]][1:10,]
plot(density)
density@units
region <- make.region()
region@units
character(0) == "m"
character(0) == character(0)
library(dsims)
plot(density)
x<- density
plot.units = character(0)
contours = TRUE
style = "points"
density.col = heat.colors(12)
main = ""
if(main == ""){
main <- x@region.name
}
main
if(!style %in% c("points", "blocks")){
stop("You have requested an unsupported plot style", call. = FALSE)
}
density.surface <- x@density.surface
#Get all the x, y and density values across strata
densities <- x.vals <- y.vals <- NULL
full.density.grid <- data.frame(x = NULL, y = NULL, density = NULL)
for(strat in seq(along = density.surface)){
full.density.grid <- rbind(full.density.grid, density.surface[[strat]])
densities <- c(densities, density.surface[[strat]]$density)
x.vals <- c(x.vals, density.surface[[strat]]$x)
y.vals <- c(y.vals, density.surface[[strat]]$y)
}
# keep a copy of all the x and y values
x.vals.orig <- x.vals
y.vals.orig <- y.vals
if(length(plot.units) == 0){
plot.units <- x@units
}
#Create plot axes labels
xlabel <- paste("X-coords (",plot.units[1],")", sep = "")
ylabel <- paste("Y-coords (",plot.units[1],")", sep = "")
xlabel
if(length(plot.units) > 0){
xlabel <- paste("X-coords (",plot.units[1],")", sep = "")
ylabel <- paste("Y-coords (",plot.units[1],")", sep = "")
}else{
xlabel <- "X-coords"
ylabel <- "Y-coords"
}
xlabel
if(length(unique(densities)) == 1){
contours = FALSE
}
contour()
contours
style == "blocks"
length(plot.units) > 0
style == "blocks"
x.vals
library(dsims)
density <- make.density()
plot(density)
plot(make.region(), add = TRUE)
pop.density <- make.density(region.obj = region, x.space = 10,
y.space = 10, constant = 0.5)
pop.density <- add.hotspot(pop.density, centre = c(50, 200),
sigma = 100, amplitude = 0.1)
pop.density <- add.hotspot(pop.density, centre = c(500, 700),
sigma = 900, amplitude = 0.05)
pop.density <- add.hotspot(pop.density, centre = c(300, 100),
sigma = 100, amplitude = -0.15)
#New plot features
plot(pop.density)
plot(pop.density, contours = FALSE, style = "blocks")
plot(pop.density, contours = TRUE, style = "blocks")
?make.population.description
pop.desc <- make.population.description()
pop.desc <- make.population.description()
library(dsims)
pop.desc <- make.population.description()
pop.desc
detect <- make.detectability()
population.description <- pop.desc
region.obj <- region
#This function generates a Population based on a fixed population size
N <- population.description@N
density.obj <- population.description@density
first = TRUE
seq(along = density.obj@density.surface)
strat = 1
n.cells <- nrow(density.obj@density.surface[[strat]])
probs <- density.obj@density.surface[[strat]][["density"]]/sum(density.obj@density.surface[[strat]][["density"]])
n.celss
n.cells
probs
#sample more animals than required as some will fall outside the survey region
samp <- suppressWarnings(sample(x = 1:n.cells, size = 2*N[strat], replace = TRUE, prob = probs))
samp
grid.locations <- density.obj@density.surface[[strat]][samp,]
grid.locations
grid.locations[1:10,]
#generate random locations within grid cell
rx <- runif(nrow(grid.locations), -density.obj@x.space/2, density.obj@x.space/2)
ry <- runif(nrow(grid.locations), -density.obj@y.space/2, density.obj@y.space/2)
#find x,y coords of animals
grid.locations$x.coord <- grid.locations$x+rx
grid.locations$y.coord <- grid.locations$y+ry
#find which x,y coords are within the region
pts <- as.points(cbind(grid.locations$x.coord, grid.locations$y.coord))
sp
#find which x,y coords are within the region
pts <- sp::as.points(cbind(grid.locations$x.coord, grid.locations$y.coord))
pts <- SpatialPoints(temp.coords)
#find which x,y coords are within the region
pts <- SpatialPoints(cbind(grid.locations$x.coord, grid.locations$y.coord))
pts
#Extract shape for current strata
strata.sp <- as(region@region[[sf.column]][i], "Spatial")
plot(strata.sp)
inside <- pts[buffered.strata,]
plot(inside, add = T)
nrow(inside)
nrow(inside@coords)
pop.locations <- inside@coords[1:N[strat],]
class(pop.locations)
pop.locations[1:10,]
plot(strata.sp)
plot(strata.sp)
points(pop.locations, col = 2, pch = 20)
inside <- pts[strata.sp,]
pop.locations <- inside@coords[1:N[strat],]
nrow(inside@coords)
plot(strata.sp)
points(pop.locations, col = 2, pch = 20)
plot(strata.sp)
pop.locations <- inside@coords[1:N[strat],]
points(pop.locations, col = 2, pch = 20)
plot(strata.sp)
points(pop.locations, col = 2, pch = 20, cex = 0.5)
points(pts@coords, col = 4, pch = 20, cex = 0.5)
points(pop.locations, col = 2, pch = 20, cex = 0.5)
inside <- pts[strata.sp,]
plot(strata.sp)
points(pts@coords, col = 4, pch = 20, cex = 0.5)
points(inside@coords, col = 2, pch = 20, cex = 0.5)
class(pop.locations)
#find which x,y coords are within the region
pts <- SpatialPoints(data.frame(x = grid.locations$x.coord, y = grid.locations$y.coord))
#Extract shape for current strata
strata.sp <- as(region@region[[sf.column]][i], "Spatial")
inside <- pts[strata.sp,]
pop.locations <- as.data.frame(inside@coords[1:N[strat],])
class(pop.locations)
pop.locations[1:10,]
# Add strata ID
pop.locations$strata <- rep(strat, nrow(grid.locations))
# Add strata ID
pop.locations$strata <- rep(strat, nrow(pop.locations))
i
pop.locations[1:10,]
all.pop.locations <- pop.locations
N <- nrow(all.pop.locations)
# Make population data.frame
population.dataframe <- cbind(object = seq_along(all.pop.locations$x), all.pop.locations)
population.dataframe[1:10,]
if(length(object@covariates) > 0){
population.dataframe <- add.covariate.values(population.dataframe, object@covariates)
}
object <- pop.desc
if(length(object@covariates) > 0){
population.dataframe <- add.covariate.values(population.dataframe, object@covariates)
}
if(N > 0){
population.dataframe <- calculate.scale.param(population.dataframe, detectability, region.obj)
}
library(dsims)
devtools::load_all()
population.dataframe <- calculate.scale.param(population.dataframe, detectability, region.obj)
detectability <- detect
population.dataframe <- calculate.scale.param(population.dataframe, detectability, region.obj)
population.dataframe[1:10,]
region.obj@area
ls()
library(dsims)
library(dsims)
library(dsims)
library(dsims)
region <- make.region
region <- make.region()
density <- make.density()
library(dsims)
ls()
region <- make.region()
density <- make.density()
library(dsims)
ls()
region <- make.region()
pop.desc <- make.population.description(reigon)
pop.desc <- make.population.description(region)
detect <- make.detectability()
pop <- generate.population(pop.desc, detect, region)
?generate.population
pop <- generate.population(pop.desc, detect, region)
pop <- generate.population(object = pop.desc,
detectablity = detect,
region.obj = region)
object <- pop.desc
detecability <- detect
library(dsims)
region.obj = region)
pop <- generate.population(object = pop.desc,
detectablity = detect,
region.obj = region)
pop <- generate.population(object = pop.desc,
detectablity = detect,
region = region)
pop <- generate.population(object = pop.desc,
detectability = detect,
region = region)
library(dsims)
pop <- generate.population(object = pop.desc,
detectability = detect,
region = region)
library(dsims)
pop <- generate.population(object = pop.desc,
detectability = detect,
region = region)
pop
plot(pop)
plot(region)
plot(pop)
pop@population
SpatialPointsDataFrame(pop@population[,1:2], data = pop@population[,c(1,4,5)])
test <- sp::SpatialPointsDataFrame(pop@population[,1:2], data = pop@population[,c(1,4,5)])
test
test2 <- sf::st_as_sf(test)
test2
library(dssd)
library(dsims)
#devtools::load_all()
region <- make.region()
library(dssd)
#devtools::load_all()
region <- make.region()
plot(region)
pop.desc <- make.population.description(region)
devtools::load_all()
9.97+7.96+5.97
13.94+9.97
install.packages(c("backports", "callr", "cli", "clipr", "covr", "devtools", "digest", "Distance", "dplyr", "DT", "e1071", "fields", "fs", "ggplot2", "glue", "htmltools", "htmlwidgets", "httr", "isoband", "jsonlite", "knitr", "later", "mrds", "openssl", "pillar", "pkgbuild", "pkgload", "processx", "promises", "ps", "Rcpp", "remotes", "rgdal", "rlang", "roxygen2", "rversions", "sp", "spelling", "stringi", "sys", "tibble", "usethis", "vctrs", "withr", "xfun"))
install.packages("splancs")
library(dssd)
library(dsims)
devtools::load_all()
setwd("~/Documents/Work/Distance Workshops/DesignAndSimWorkshop2021/PolarBears")
library(dssd)
library(sf)
fileALL <- "StudyArea.shp"
ALL.sh <- st_read(dsn=paste0(fileALL))
plot(ALL.sh)
#Areas per stratum
#inshore
#high density parallel
insP <- ALL.sh$AreaKM[1]
#high density zigzag
insZ <- ALL.sh$AreaKM[2]
#offshore
#north
offN <- ALL.sh$AreaKM[3]
#center
offC <- ALL.sh$AreaKM[4]
#south
offS <- ALL.sh$AreaKM[5]
ALL.r <- make.region(region.name = "Study area",
strata.name=c("inP","inZ","offN","offC","offS"),shape = ALL.sh)
ALL.cover <- make.coverage(ALL.r,n.grid.points = 100)
ALL.d2 <- make.design(region = ALL.r,
design = "systematic",
spacing  = c(10000,10000,30000,30000,30000),
edge.protocol = "minus",
design.angle = c(0,45,20,65,130),
truncation = 750,
coverage.grid = ALL.cover)
#create a realization of transects from the design
ALL.t2 <- generate.transects(ALL.d2)
#transects - looks fine
plot(ALL.r,ALL.t2,col=1,lwd=0.5)
#library(ggplot2)
#ggplot() +geom_sf(data = ALL.sh,aes(fill = SurveyType))+geom_sf(data=ALL.t2@samplers)
library(mrds)
library(dsm)
?`dsm-package`
density <- make.density(region.obj = ALL.r,
x.space = 5000,
constant = rep(1,5))
debug(get.surface.constant)
density <- make.density(region.obj = ALL.r,
x.space = 5000,
constant = rep(1,5))
library(sf)
CRS(pts)
sf::st_crs(pts)
sf::st_crs(buffered.strata)
sf::st_crs(ALL.r)
sf::st_crs(ALL.r@region)
ls()
setwd("~/Documents/Work/Distance Workshops/DesignAndSimWorkshop2021/PolarBears")
library(dssd)
library(sf)
fileALL <- "StudyArea.shp"
ALL.sh <- st_read(dsn=paste0(fileALL))
plot(ALL.sh)
#Areas per stratum
#inshore
#high density parallel
insP <- ALL.sh$AreaKM[1]
#high density zigzag
insZ <- ALL.sh$AreaKM[2]
#offshore
#north
offN <- ALL.sh$AreaKM[3]
#center
offC <- ALL.sh$AreaKM[4]
#south
offS <- ALL.sh$AreaKM[5]
setwd("~/Documents/GitHub/dsims/dsims")
setwd("~/Documents/GitHub/dsims/dsims")
devtools::load_all()
ALL.r <- make.region(region.name = "Study area",
strata.name=c("inP","inZ","offN","offC","offS"),shape = ALL.sh)
plot(ALL.r)
class(ALL.r)
setwd("~/Documents/GitHub/dsims/dsims")
devtools::load_all()
setwd("~/Documents/Work/Distance Workshops/DesignAndSimWorkshop2021/PolarBears")
library(dssd)
library(sf)
fileALL <- "StudyArea.shp"
ALL.sh <- st_read(dsn=paste0(fileALL))
#plot(ALL.sh)
#Areas per stratum
#inshore
#high density parallel
insP <- ALL.sh$AreaKM[1]
#high density zigzag
insZ <- ALL.sh$AreaKM[2]
#offshore
#north
offN <- ALL.sh$AreaKM[3]
#center
offC <- ALL.sh$AreaKM[4]
#south
offS <- ALL.sh$AreaKM[5]
ALL.r <- make.region(region.name = "Study area",
strata.name=c("inP","inZ","offN","offC","offS"),shape = ALL.sh)
plot(ALL.r)
library(dssd)
setwd("~/Documents/GitHub/dsims/dsims")
devtools::load_all()
setwd("~/Documents/Work/Distance Workshops/DesignAndSimWorkshop2021/PolarBears")
library(dssd)
library(sf)
fileALL <- "StudyArea.shp"
ALL.sh <- st_read(dsn=paste0(fileALL))
#plot(ALL.sh)
#Areas per stratum
#inshore
#high density parallel
insP <- ALL.sh$AreaKM[1]
#high density zigzag
insZ <- ALL.sh$AreaKM[2]
#offshore
#north
offN <- ALL.sh$AreaKM[3]
#center
offC <- ALL.sh$AreaKM[4]
#south
offS <- ALL.sh$AreaKM[5]
ALL.r <- make.region(region.name = "Study area",
strata.name=c("inP","inZ","offN","offC","offS"),shape = ALL.sh)
plot(ALL.r)
class(ALL.r)
install.packages("dssd")
install.packages("dssd")
install.packages("dssd")
install.packages("dssd")
setwd("~/Documents/GitHub/dsims/dsims")
devtools::load_all()
setwd("~/Documents/Work/Distance Workshops/DesignAndSimWorkshop2021/PolarBears")
fileALL <- "StudyArea.shp"
ALL.sh <- st_read(dsn=paste0(fileALL))
library(sf)
fileALL <- "StudyArea.shp"
ALL.sh <- st_read(dsn=paste0(fileALL))
insP <- ALL.sh$AreaKM[1]
#high density zigzag
insZ <- ALL.sh$AreaKM[2]
#offshore
#north
offN <- ALL.sh$AreaKM[3]
#center
offC <- ALL.sh$AreaKM[4]
#south
offS <- ALL.sh$AreaKM[5]
ALL.r <- make.region(region.name = "Study area",
strata.name=c("inP","inZ","offN","offC","offS"),shape = ALL.sh)
plot(ALL.r)
class(ALL.r)
source('~/Documents/GitHub/dsuds/dsuds/R/Region.R')
plot(ALL.r)
library(dssd)
plot(ALL.r)
?Region
?dssd::`Region-class`
library(dssd)
region <- make.region()
plot(region)
class(region)
setwd("~/Documents/GitHub/dsims/dsims")
devtools::load_all()
setwd("~/Documents/Work/Distance Workshops/DesignAndSimWorkshop2021/PolarBears")
library(sf)
fileALL <- "StudyArea.shp"
ALL.sh <- st_read(dsn=paste0(fileALL))
insP <- ALL.sh$AreaKM[1]
#high density zigzag
insZ <- ALL.sh$AreaKM[2]
#offshore
#north
offN <- ALL.sh$AreaKM[3]
#center
offC <- ALL.sh$AreaKM[4]
#south
offS <- ALL.sh$AreaKM[5]
ALL.r <- make.region(region.name = "Study area",
strata.name=c("inP","inZ","offN","offC","offS"),shape = ALL.sh)
plot(ALL.r)
class(ALL.r)
ALL.r <- dssd::make.region(region.name = "Study area",
strata.name=c("inP","inZ","offN","offC","offS"),shape = ALL.sh)
plot(ALL.r)
class(ALL.r)
library(dssd)
region <- make.region()
plot(region)
setwd("~/Documents/GitHub/dsims/dsims")
devtools::load_all()
setwd("~/Documents/Work/Distance Workshops/DesignAndSimWorkshop2021/PolarBears")
library(sf)
fileALL <- "StudyArea.shp"
ALL.sh <- st_read(dsn=paste0(fileALL))
#plot(ALL.sh)
#Areas per stratum
#inshore
#high density parallel
insP <- ALL.sh$AreaKM[1]
#high density zigzag
insZ <- ALL.sh$AreaKM[2]
#offshore
#north
offN <- ALL.sh$AreaKM[3]
#center
offC <- ALL.sh$AreaKM[4]
#south
offS <- ALL.sh$AreaKM[5]
ALL.r <- dssd::make.region(region.name = "Study area",
strata.name=c("inP","inZ","offN","offC","offS"),shape = ALL.sh)
plot(ALL.r)
plot(region)
library(dsims)
library(dsims)
